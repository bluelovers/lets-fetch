import Bluebird from 'bluebird';
let _BluebirdCancelable;
export function getBluebirdCancelable() {
    if (_BluebirdCancelable == null) {
        let p = Bluebird.getNewLibraryCopy();
        p.config({
            cancellation: true
        });
        _BluebirdCancelable = p;
    }
    return _BluebirdCancelable;
}
export function delay(ms) {
    return new Bluebird(async (resolve, reject) => {
        ms = await ms;
        await Bluebird.delay(ms);
        resolve(ms);
    });
}
export function resolveCall(fn, ...argArray) {
    return Bluebird.resolve(fn)
        .then(fn => {
        return fn(...argArray);
    });
}
export function resolveTimeout(value, timeout) {
    let p = getBluebirdCancelable().resolve(value);
    return p
        .timeout(timeout, `operation timed out ${timeout}ms`)
        .tapCatch(function () {
        return p.cancel();
    });
}
/**
 * Wait a specific time before executing a callback
 */
export function wait(callback, ms) {
    return delay(ms).then(() => {
        return resolveCall(callback);
    });
}
export class ResponseError extends Error {
    constructor(response, content, message) {
        super((message != null) ? message : 'Status ' + response.status);
        this.response = response;
        this.content = content;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQTtBQUUvQixJQUFJLG1CQUFvQyxDQUFDO0FBRXpDLE1BQU0sVUFBVSxxQkFBcUI7SUFFcEMsSUFBSSxtQkFBbUIsSUFBSSxJQUFJLEVBQy9CO1FBQ0MsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFckMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNSLFlBQVksRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FBQztRQUVILG1CQUFtQixHQUFHLENBQUMsQ0FBQTtLQUN2QjtJQUVELE9BQU8sbUJBQW1CLENBQUM7QUFDNUIsQ0FBQztBQUlELE1BQU0sVUFBVSxLQUFLLENBQUksRUFBc0I7SUFFOUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBRTdDLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUNkLE1BQU0sUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QixPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDYixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFxQixFQUFtQyxFQUFFLEdBQUcsUUFBVztJQUVsRyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1NBQ3pCLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUVWLE9BQU8sRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUE7SUFDdkIsQ0FBQyxDQUFDLENBQ0Q7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBSSxLQUFxQixFQUFFLE9BQWU7SUFFdkUsSUFBSSxDQUFDLEdBQUcscUJBQXFCLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFL0MsT0FBTyxDQUFDO1NBQ04sT0FBTyxDQUFDLE9BQU8sRUFBRSx1QkFBdUIsT0FBTyxJQUFJLENBQUM7U0FDcEQsUUFBUSxDQUFDO1FBRVQsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFJLFFBQXlDLEVBQUUsRUFBc0I7SUFFeEYsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUMxQixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUM3QixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLE9BQU8sYUFBMkIsU0FBUSxLQUFLO0lBWXBELFlBQVksUUFBa0IsRUFBRSxPQUFVLEVBQUUsT0FBZ0I7UUFFM0QsS0FBSyxDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDdkIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJ1xuXG5sZXQgX0JsdWViaXJkQ2FuY2VsYWJsZTogdHlwZW9mIEJsdWViaXJkO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qmx1ZWJpcmRDYW5jZWxhYmxlKCk6IHR5cGVvZiBCbHVlYmlyZFxue1xuXHRpZiAoX0JsdWViaXJkQ2FuY2VsYWJsZSA9PSBudWxsKVxuXHR7XG5cdFx0bGV0IHAgPSBCbHVlYmlyZC5nZXROZXdMaWJyYXJ5Q29weSgpO1xuXG5cdFx0cC5jb25maWcoe1xuXHRcdFx0Y2FuY2VsbGF0aW9uOiB0cnVlXG5cdFx0fSk7XG5cblx0XHRfQmx1ZWJpcmRDYW5jZWxhYmxlID0gcFxuXHR9XG5cblx0cmV0dXJuIF9CbHVlYmlyZENhbmNlbGFibGU7XG59XG5cbmV4cG9ydCB0eXBlIFJlc29sdmFibGU8Uj4gPSBSIHwgUHJvbWlzZUxpa2U8Uj47XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxheTxSPihtczogUmVzb2x2YWJsZTxudW1iZXI+KTogQmx1ZWJpcmQ8bnVtYmVyPlxue1xuXHRyZXR1cm4gbmV3IEJsdWViaXJkKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+XG5cdHtcblx0XHRtcyA9IGF3YWl0IG1zO1xuXHRcdGF3YWl0IEJsdWViaXJkLmRlbGF5KG1zKTtcblx0XHRyZXNvbHZlKG1zKTtcblx0fSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDYWxsPFAgZXh0ZW5kcyBhbnlbXSwgUj4oZm46IFJlc29sdmFibGU8KCguLi5hcmd2OiBQKSA9PiBSKT4sIC4uLmFyZ0FycmF5OiBQKTogQmx1ZWJpcmQ8Uj5cbntcblx0cmV0dXJuIEJsdWViaXJkLnJlc29sdmUoZm4pXG5cdFx0LnRoZW4oZm4gPT5cblx0XHR7XG5cdFx0XHRyZXR1cm4gZm4oLi4uYXJnQXJyYXkpXG5cdFx0fSlcblx0XHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlVGltZW91dDxUPih2YWx1ZTogUHJvbWlzZUxpa2U8VD4sIHRpbWVvdXQ6IG51bWJlcik6IEJsdWViaXJkPFQ+XG57XG5cdGxldCBwID0gZ2V0Qmx1ZWJpcmRDYW5jZWxhYmxlKCkucmVzb2x2ZSh2YWx1ZSk7XG5cblx0cmV0dXJuIHBcblx0XHQudGltZW91dCh0aW1lb3V0LCBgb3BlcmF0aW9uIHRpbWVkIG91dCAke3RpbWVvdXR9bXNgKVxuXHRcdC50YXBDYXRjaChmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdHJldHVybiBwLmNhbmNlbCgpO1xuXHRcdH0pXG59XG5cbi8qKlxuICogV2FpdCBhIHNwZWNpZmljIHRpbWUgYmVmb3JlIGV4ZWN1dGluZyBhIGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0PFQ+KGNhbGxiYWNrOiBSZXNvbHZhYmxlPCgpID0+IFJlc29sdmFibGU8VD4+LCBtczogUmVzb2x2YWJsZTxudW1iZXI+KVxue1xuXHRyZXR1cm4gZGVsYXkobXMpLnRoZW4oKCkgPT4ge1xuXHRcdHJldHVybiByZXNvbHZlQ2FsbChjYWxsYmFjaylcblx0fSlcbn1cblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlRXJyb3I8VCA9IHVua25vd24+IGV4dGVuZHMgRXJyb3Jcbntcblx0LyoqXG5cdCAqIHJlc3BvbnNlIGlzIHRoZSBsYXN0IHJlc3BvbnNlIG9iamVjdCAoc28geW91IGNhbiBlLmcuIGFjY2VzcyBlcnIucmVzcG9uc2Uuc3RhdHVzKVxuXHQgKi9cblx0cmVzcG9uc2U6IFJlc3BvbnNlO1xuXHQvKipcblx0ICogY29udGVudCBpcyB0aGUgcGFyc2VkIGJvZHkgb2YgdGhlIHJlc3BvbnNlLCBpZiBhdmFpbGFibGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2Vcblx0ICovXG5cdGNvbnRlbnQ6IFQ7XG5cblx0Y29uc3RydWN0b3IocmVzcG9uc2U6IFJlc3BvbnNlLCBjb250ZW50OiBULCBtZXNzYWdlPzogc3RyaW5nKVxuXHR7XG5cdFx0c3VwZXIoKG1lc3NhZ2UgIT0gbnVsbCkgPyBtZXNzYWdlIDogJ1N0YXR1cyAnICsgcmVzcG9uc2Uuc3RhdHVzKVxuXG5cdFx0dGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlXG5cdFx0dGhpcy5jb250ZW50ID0gY29udGVudFxuXHR9XG59XG4iXX0=