"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = __importDefault(require("bluebird"));
let _BluebirdCancelable;
function getBluebirdCancelable() {
    if (_BluebirdCancelable == null) {
        let p = bluebird_1.default.getNewLibraryCopy();
        p.config({
            cancellation: true
        });
        _BluebirdCancelable = p;
    }
    return _BluebirdCancelable;
}
exports.getBluebirdCancelable = getBluebirdCancelable;
function delay(ms) {
    return new bluebird_1.default(async (resolve, reject) => {
        ms = await ms;
        await bluebird_1.default.delay(ms);
        resolve(ms);
    });
}
exports.delay = delay;
function resolveCall(fn, ...argArray) {
    return bluebird_1.default.resolve(fn)
        .then(fn => {
        return fn(...argArray);
    });
}
exports.resolveCall = resolveCall;
function resolveTimeout(value, timeout) {
    let p = getBluebirdCancelable().resolve(value);
    return p
        .timeout(timeout, `operation timed out ${timeout}ms`)
        .tapCatch(function () {
        return p.cancel();
    });
}
exports.resolveTimeout = resolveTimeout;
/**
 * Wait a specific time before executing a callback
 */
function wait(callback, ms) {
    return delay(ms).then(() => {
        return resolveCall(callback);
    });
}
exports.wait = wait;
class ResponseError extends Error {
    constructor(response, content, message) {
        super((message != null) ? message : 'Status ' + response.status);
        this.response = response;
        this.content = content;
    }
}
exports.ResponseError = ResponseError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0RBQStCO0FBRS9CLElBQUksbUJBQW9DLENBQUM7QUFFekMsU0FBZ0IscUJBQXFCO0lBRXBDLElBQUksbUJBQW1CLElBQUksSUFBSSxFQUMvQjtRQUNDLElBQUksQ0FBQyxHQUFHLGtCQUFRLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUVyQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ1IsWUFBWSxFQUFFLElBQUk7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsbUJBQW1CLEdBQUcsQ0FBQyxDQUFBO0tBQ3ZCO0lBRUQsT0FBTyxtQkFBbUIsQ0FBQztBQUM1QixDQUFDO0FBZEQsc0RBY0M7QUFJRCxTQUFnQixLQUFLLENBQUksRUFBc0I7SUFFOUMsT0FBTyxJQUFJLGtCQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUU3QyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDZCxNQUFNLGtCQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQVJELHNCQVFDO0FBRUQsU0FBZ0IsV0FBVyxDQUFxQixFQUFtQyxFQUFFLEdBQUcsUUFBVztJQUVsRyxPQUFPLGtCQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztTQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFFVixPQUFPLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFBO0lBQ3ZCLENBQUMsQ0FBQyxDQUNEO0FBQ0gsQ0FBQztBQVJELGtDQVFDO0FBRUQsU0FBZ0IsY0FBYyxDQUFJLEtBQXFCLEVBQUUsT0FBZTtJQUV2RSxJQUFJLENBQUMsR0FBRyxxQkFBcUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUUvQyxPQUFPLENBQUM7U0FDTixPQUFPLENBQUMsT0FBTyxFQUFFLHVCQUF1QixPQUFPLElBQUksQ0FBQztTQUNwRCxRQUFRLENBQUM7UUFFVCxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFWRCx3Q0FVQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsSUFBSSxDQUFJLFFBQXlDLEVBQUUsRUFBc0I7SUFFeEYsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUMxQixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUM3QixDQUFDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFMRCxvQkFLQztBQUVELE1BQWEsYUFBMkIsU0FBUSxLQUFLO0lBWXBELFlBQVksUUFBa0IsRUFBRSxPQUFVLEVBQUUsT0FBZ0I7UUFFM0QsS0FBSyxDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFaEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDdkIsQ0FBQztDQUNEO0FBbkJELHNDQW1CQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbHVlYmlyZCBmcm9tICdibHVlYmlyZCdcblxubGV0IF9CbHVlYmlyZENhbmNlbGFibGU6IHR5cGVvZiBCbHVlYmlyZDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJsdWViaXJkQ2FuY2VsYWJsZSgpOiB0eXBlb2YgQmx1ZWJpcmRcbntcblx0aWYgKF9CbHVlYmlyZENhbmNlbGFibGUgPT0gbnVsbClcblx0e1xuXHRcdGxldCBwID0gQmx1ZWJpcmQuZ2V0TmV3TGlicmFyeUNvcHkoKTtcblxuXHRcdHAuY29uZmlnKHtcblx0XHRcdGNhbmNlbGxhdGlvbjogdHJ1ZVxuXHRcdH0pO1xuXG5cdFx0X0JsdWViaXJkQ2FuY2VsYWJsZSA9IHBcblx0fVxuXG5cdHJldHVybiBfQmx1ZWJpcmRDYW5jZWxhYmxlO1xufVxuXG5leHBvcnQgdHlwZSBSZXNvbHZhYmxlPFI+ID0gUiB8IFByb21pc2VMaWtlPFI+O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVsYXk8Uj4obXM6IFJlc29sdmFibGU8bnVtYmVyPik6IEJsdWViaXJkPG51bWJlcj5cbntcblx0cmV0dXJuIG5ldyBCbHVlYmlyZChhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PlxuXHR7XG5cdFx0bXMgPSBhd2FpdCBtcztcblx0XHRhd2FpdCBCbHVlYmlyZC5kZWxheShtcyk7XG5cdFx0cmVzb2x2ZShtcyk7XG5cdH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ2FsbDxQIGV4dGVuZHMgYW55W10sIFI+KGZuOiBSZXNvbHZhYmxlPCgoLi4uYXJndjogUCkgPT4gUik+LCAuLi5hcmdBcnJheTogUCk6IEJsdWViaXJkPFI+XG57XG5cdHJldHVybiBCbHVlYmlyZC5yZXNvbHZlKGZuKVxuXHRcdC50aGVuKGZuID0+XG5cdFx0e1xuXHRcdFx0cmV0dXJuIGZuKC4uLmFyZ0FycmF5KVxuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVRpbWVvdXQ8VD4odmFsdWU6IFByb21pc2VMaWtlPFQ+LCB0aW1lb3V0OiBudW1iZXIpOiBCbHVlYmlyZDxUPlxue1xuXHRsZXQgcCA9IGdldEJsdWViaXJkQ2FuY2VsYWJsZSgpLnJlc29sdmUodmFsdWUpO1xuXG5cdHJldHVybiBwXG5cdFx0LnRpbWVvdXQodGltZW91dCwgYG9wZXJhdGlvbiB0aW1lZCBvdXQgJHt0aW1lb3V0fW1zYClcblx0XHQudGFwQ2F0Y2goZnVuY3Rpb24gKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gcC5jYW5jZWwoKTtcblx0XHR9KVxufVxuXG4vKipcbiAqIFdhaXQgYSBzcGVjaWZpYyB0aW1lIGJlZm9yZSBleGVjdXRpbmcgYSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gd2FpdDxUPihjYWxsYmFjazogUmVzb2x2YWJsZTwoKSA9PiBSZXNvbHZhYmxlPFQ+PiwgbXM6IFJlc29sdmFibGU8bnVtYmVyPilcbntcblx0cmV0dXJuIGRlbGF5KG1zKS50aGVuKCgpID0+IHtcblx0XHRyZXR1cm4gcmVzb2x2ZUNhbGwoY2FsbGJhY2spXG5cdH0pXG59XG5cbmV4cG9ydCBjbGFzcyBSZXNwb25zZUVycm9yPFQgPSB1bmtub3duPiBleHRlbmRzIEVycm9yXG57XG5cdC8qKlxuXHQgKiByZXNwb25zZSBpcyB0aGUgbGFzdCByZXNwb25zZSBvYmplY3QgKHNvIHlvdSBjYW4gZS5nLiBhY2Nlc3MgZXJyLnJlc3BvbnNlLnN0YXR1cylcblx0ICovXG5cdHJlc3BvbnNlOiBSZXNwb25zZTtcblx0LyoqXG5cdCAqIGNvbnRlbnQgaXMgdGhlIHBhcnNlZCBib2R5IG9mIHRoZSByZXNwb25zZSwgaWYgYXZhaWxhYmxlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG5cdCAqL1xuXHRjb250ZW50OiBUO1xuXG5cdGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBSZXNwb25zZSwgY29udGVudDogVCwgbWVzc2FnZT86IHN0cmluZylcblx0e1xuXHRcdHN1cGVyKChtZXNzYWdlICE9IG51bGwpID8gbWVzc2FnZSA6ICdTdGF0dXMgJyArIHJlc3BvbnNlLnN0YXR1cylcblxuXHRcdHRoaXMucmVzcG9uc2UgPSByZXNwb25zZVxuXHRcdHRoaXMuY29udGVudCA9IGNvbnRlbnRcblx0fVxufVxuIl19